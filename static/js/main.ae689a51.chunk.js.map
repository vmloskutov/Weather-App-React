{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","city","className","country","temp","pressure","sunrise","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","date","sunrise_date","sunset_date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","sys","Date","setTime","getHours","getMinutes","getSeconds","main","Math","round","_this","setState","stop","info","components_form","this","weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae689a51.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Info = () => (\n  <div>\n    <h2>Погодное приложение</h2>\n    <p>Узнайте погоду в вашем городе!</p>\n  </div>\n);\n\nexport default Info;\n","import React from \"react\";\n\nconst Form = props => (\n  <form onSubmit = {props.weatherMethod}>\n    <input type = \"text\" name = \"city\" placeholder = \"Город\" />\n    <button>Получить погоду</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\n\nconst Weather = props => (\n  <div>\n  { props.city &&\n    <div className=\"infoWeath\">\n      <p>Местоположение: {props.city}, {props.country}</p>\n      <p>Температура: {props.temp}°</p>\n      <p>Давление: {props.pressure}</p>\n      <p>Восход солнца: {props.sunrise}</p>\n      <p>Заход солнца: {props.sunset}</p>\n    </div>\n  }\n  <p className=\"error\">{props.error}</p>\n  </div>\n);\n\nexport default Weather;\n","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY =\"31d8cd5bb9c6aec41d284a3c7b901c23\"\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n\n    if (city) {\n\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\n      const data = await api_url.json();\n      //console.log(data);\n\n      let sunrise = data.sys.sunrise;\n      let sunset = data.sys.sunset;\n      let date = new Date();\n      date.setTime(sunrise * 1000);\n      let sunrise_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n      date.setTime(sunset * 1000);\n      let sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      let temp = data.main.temp - 273.15;\n      temp = Math.round(temp);\n\n      this.setState({\n        temp: temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunrise: sunrise_date,\n        sunset: sunset_date,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        error: \"Введите название города\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n              <div className=\"col-sm-7 form\">\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  pressure={this.state.pressure}\n                  sunrise = {this.state.sunrise}\n                  sunset={this.state.sunset}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}